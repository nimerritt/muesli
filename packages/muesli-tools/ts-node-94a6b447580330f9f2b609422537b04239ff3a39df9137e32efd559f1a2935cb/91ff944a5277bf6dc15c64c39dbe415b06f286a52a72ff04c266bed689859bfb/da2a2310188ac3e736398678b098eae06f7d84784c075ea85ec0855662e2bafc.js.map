{"version":3,"file":"/workspace/packages/muesli-tools/test/create-interface-test.ts","sources":["/workspace/packages/muesli-tools/test/create-interface-test.ts"],"names":[],"mappings":";;AAAA,sCAA+C;AAE/C,6BAA+B;AAC/B,6BAA8B;AAE9B,cAAc,IAA8B;IAC1C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACjD,CAAC;AAED,QAAQ,CAAC,6CAA6C,EAAE;IACtD,IAAM,MAAM,GAAiB;QAC3B,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE;YACV,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;SACxB;QACD,QAAQ,EAAE,CAAC,KAAK,CAAC;QACjB,oBAAoB,EAAE,KAAK;KAC5B,CAAC;IAEF,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,EAAE,CAAC,qDAAqD,EAAE;YACxD,IAAM,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACnD,IAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CACtC,KAAK,EACL,GAAG,CAAC,IAAI,CAAC,MAAM,EACf,GAAG,CAAC,gBAAgB,CAAC,QAAQ,CAC9B,CAAC;YACF,aAAa,CAAC,OAAO,GAAG;gBACtB,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;aAC5C,CAAC;YACF,IAAM,IAAI,GAAG,uBAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC7C,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6CAA6C,EAAE;IACtD,IAAM,MAAM,GAAiB;QAC3B,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE;YACV,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;SACxB;QACD,QAAQ,EAAE,EAAE;QACZ,oBAAoB,EAAE,KAAK;KAC5B,CAAC;IAEF,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,EAAE,CAAC,sDAAsD,EAAE;YACzD,IAAM,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACnD,aAAa,CAAC,OAAO,GAAG;gBACtB,GAAG,CAAC,MAAM,CAAC,QAAQ,CACjB,KAAK,EACL,GAAG,CAAC,IAAI,CAAC,MAAM,EACf,GAAG,CAAC,gBAAgB,CAAC,QAAQ,CAC9B;aACF,CAAC;YACF,IAAM,IAAI,GAAG,uBAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC7C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,8BAA8B,EAAE;IACvC,IAAM,MAAM,GAAiB;QAC3B,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE,EACX;QACD,QAAQ,EAAE,EAAE;QACZ,oBAAoB,EAAE,KAAK;KAC5B,CAAC;IAEF,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,EAAE,CAAC,oDAAoD,EAAE;YACvD,IAAM,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACnD,aAAM,CAAC,uBAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createInterface } from \"../src/parse\";\nimport { MuesliSchema } from \"@nimerritt/muesli-schema\";\nimport * as dom from 'dts-dom';\nimport { expect } from 'chai';\n\nfunction json(intf: dom.InterfaceDeclaration): string {\n  return JSON.stringify(dom.emit(intf), null, 2);\n}\n\ndescribe('Given an muesli schema with required values', () => {\n  const schema: MuesliSchema = {\n    type: 'object',\n    properties: {\n      bar: { type: 'number' },\n    },\n    required: ['bar'],\n    additionalProperties: false,\n  };\n\n  describe('createInterface', () => {\n    it('should return an interface with a required property', () => {\n      const expected_intf = dom.create.interface('Test');\n      const optional_foo = dom.create.property(\n        'foo',\n        dom.type.string, \n        dom.DeclarationFlags.Optional,\n      );\n      expected_intf.members = [ \n        dom.create.property('bar', dom.type.number),\n      ];\n      const intf = createInterface('Test', schema);\n      expect(json(intf)).to.eql(json(expected_intf));\n    });\n  });\n});\n\ndescribe('Given an muesli schema with optional values', () => {\n  const schema: MuesliSchema = {\n    type: 'object',\n    properties: {\n      foo: { type: 'string' },\n    },\n    required: [],\n    additionalProperties: false,\n  };\n\n  describe('createInterface', () => {\n    it('should return an interface with an optional property', () => {\n      const expected_intf = dom.create.interface('Test');\n      expected_intf.members = [\n        dom.create.property(\n          'foo',\n          dom.type.string, \n          dom.DeclarationFlags.Optional,\n        ),\n      ];\n      const intf = createInterface('Test', schema);\n      expect(intf).to.eql(expected_intf);\n    });\n  });\n});\n\ndescribe('Given an empty muesli schema', () => {\n  const schema: MuesliSchema = {\n    type: 'object',\n    properties: {\n    },\n    required: [],\n    additionalProperties: false,\n  };\n\n  describe('createInterface', () => {\n    it('should return an interface with the name passed in', () => {\n      const expected_intf = dom.create.interface('Test');\n      expect(createInterface('Test', schema)).to.eql(expected_intf);\n    });\n  });\n});\n"]}